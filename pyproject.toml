[project]
name = "pysparklearning"
version = "0.1.0"
description = "Experimenting with Pyspark"
readme = "README.md"
requires-python = "==3.10.2"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:.*Use SparkSession\\.builder\\.getOrCreate.*:FutureWarning",
    "ignore:.*DataFrame constructor is internal.*:UserWarning",
]

[tool.ruff]

# Same as Black.
line-length = 88
indent-width = 4

# Adjust to your Python version
target-version = "py310"

[tool.ruff.lint]

# Enable basic type-checking
extend-select = ["TC001"]

# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]

# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]

convention = "google"

[tool.mypy]
ignore_missing_imports = "True"

